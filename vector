template <typename T>
class SimpleVector {
    T* data;
    size_t _size;
    size_t _capacity;

    void reallocate(size_t new_capacity) {
        T* new_data = new T[new_capacity];
        for (size_t i = 0; i < _size; ++i)
            new_data[i] = data[i];
        delete[] data;
        data = new_data;
        _capacity = new_capacity;
    }

public:
    SimpleVector() : data(nullptr), _size(0), _capacity(0) {}

    ~SimpleVector() { delete[] data; }

    // Copy constructor and assignment operator are omitted for simplicity

    // Add an element at the end
    void push_back(const T& value) {
        if (_size == _capacity) {
            size_t new_cap = (_capacity == 0) ? 1 : 2 * _capacity;
            reallocate(new_cap);
        }
        data[_size++] = value;
    }

    // Returns the number of elements
    size_t size() const { return _size; }

    // Returns the capacity
    size_t capacity() const { return _capacity; }

    // Duplicates the element at the given index and inserts it just after the original
    void dupement(size_t index) {
        if (index >= _size)
            return;
        if (_size == _capacity) {
            size_t new_cap = (_capacity == 0) ? 1 : 2 * _capacity;
            reallocate(new_cap);
        }
        // Shift elements to the right
        for (size_t i = _size; i > index + 1; --i) {
            data[i] = data[i - 1];
        }
        data[index + 1] = data[index];
        ++_size;
    }

    // Initialize or clear the vector
    void new_() {
        delete[] data;
        data = nullptr;
        _size = 0;
        _capacity = 0;
    }

    // Access element at index
    T& operator[](size_t index) { return data[index]; }
    const T& operator[](size_t index) const { return data[index]; }
};
